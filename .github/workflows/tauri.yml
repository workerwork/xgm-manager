name: Publish Tauri App

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version (bash)
        id: extract_version
        shell: bash
        run: |
          version=$(grep '"version":' src-tauri/tauri.conf.json | head -1 | cut -d '"' -f4)
          echo "Extracted version: $version"
          echo "::set-output name=version::$version"

  publish-tauri:
    needs: prepare
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Setup Node.js (with Yarn cache)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Rust crates
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Build and Publish Tauri App
        uses: tauri-apps/tauri-action@v0.5.20
        with:
          tagName: app-v${{ needs.prepare.outputs.version }}
          releaseName: "App v${{ needs.prepare.outputs.version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          releasePrerelease: false
          args: ${{ matrix.args }}
          runner: 'yarn'
          workingDirectory: '.'
          release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        